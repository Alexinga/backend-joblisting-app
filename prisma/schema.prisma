generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           Int      @id @default(autoincrement())
  name         String
  createdAt    DateTime @default(now())
  companyImage String?
  gallery      String[]
  job          Job[]
}

model Job {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  title       String
  description String
  salary      Int
  jobType     String
  position    String
  companyId   Int?
  locationId  Int?
  contact     Contact?
  company     Company?  @relation(fields: [companyId], references: [id])
  location    Location? @relation(fields: [locationId], references: [id])
}

model Contact {
  id          Int    @id @default(autoincrement())
  email       String @unique
  name        String
  phoneNumber String
  jobId       Int    @unique
  job         Job    @relation(fields: [jobId], references: [id])
}

model Names {
  id          Int      @id @default(autoincrement())
  friendNames String[]
}

model Location {
  id      Int    @id @default(autoincrement())
  city    String
  state   String
  country String
  job     Job[]
}

model Building {
  id             Int       @id @default(autoincrement())
  name           String
  buildingNumber Int
  offices        Offices[]
}

model Offices {
  id           Int       @id @default(autoincrement())
  officeNumber Int
  buildingId   Int?
  building     Building? @relation(fields: [buildingId], references: [id])
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String?         @db.Char(60)
  createdAt     DateTime        @default(now())
  role          Role            @default(USER)
  authProvider  AuthType        @default(CREDENTIALS)
  passwordReset PasswordReset[]
  post          Post?
}

model Post {
  id     Int    @id @default(autoincrement())
  title  String
  desc   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  expiresAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model dummytest {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  email     String?   @unique @db.VarChar(200)
  createdat DateTime? @default(now()) @db.Timestamp(6)
}

enum Role {
  ADMIN
  USER
  MANAGER
}

enum AuthType {
  CREDENTIALS
  GOOGLE
}
