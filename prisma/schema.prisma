// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id Int @id @default(autoincrement())
  name String
  companyImage String?
  gallery String[]
  createdAt DateTime @default(now())
  job Job[]
}

model Job {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  title String
  description String
  locationId Int?
  location Location? @relation(fields: [locationId], references: [id])
  salary Int
  jobType String
  position String
  contact Contact?
  companyId Int?
  company Company? @relation(fields: [companyId], references: [id])
}

model Contact {
  id Int @id @default(autoincrement())
  email String @unique
  name String
  phoneNumber String
  // This make a 1:1 connection with model Job where it doesn't have many
  job Job? @relation(fields: [jobId], references: [id])
  jobId Int @unique
}

model Names {
  id Int @id @default(autoincrement())
  friendNames String[]
}


model Location {
  id Int @id @default(autoincrement())
  city String
  state String
  country String

  // jobId Int @unique
  // job Job? @relation(fields: [jobId], references: [id])
  // This makes a 1:many connection where many locations can be tied to 1 job
  job Job[]
}

model Building {
  id Int @id @default(autoincrement())
  name String
  buildingNumber Int
  offices Offices[]
}

model Offices {
  id Int @id @default(autoincrement())
  officeNumber Int
  buildingId Int?
  building Building? @relation(fields: [buildingId], references: [id])
}

enum Role {
  ADMIN
  USER
  MANAGER
}

enum AuthType {
  CREDENTIALS
  GOOGLE
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String? @db.Char(60)
  authProvider AuthType @default(CREDENTIALS)
  createdAt DateTime @default(now())
  role Role @default(USER)
  // postId Int? @unique
  // post Post? @relation(fields: [postId], references: [id])
  post Post?
  passwordReset PasswordReset[]
}

model Post {
  id Int @id @default(autoincrement())
  title String
  desc String
  // user User?
  userId Int @unique
  user User? @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id Int @id @default(autoincrement())
  userId Int
  token String
  expiresAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}